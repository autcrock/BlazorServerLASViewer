@page "/loadlogasciilasfile"
@using BlazorServerLASViewer.Domains.Well;

<h1>Log ASCII (LAS) file loader</h1>

<InputFile class="btn btn-primary" OnChange="LoadLogASCII" />

@if (File == null)
{
    <p> No file selected</p>
}
else
{

    if (Well == null || Well.Data == null || Well.Data.Headers == null || Well.Data.Logs == null)
    {
        <p>Loading log ASCII format file : @File.Name (@File.Size bytes)</p>
    }
    else
    {
        <style>
            th,td {
                padding: 5px;
            }
        </style>

        <table>
            <thead>
                <tr>
                    <th> File Name </th>
                    <th> File Size </th>
                    <th> Number of Log Headers </th>
                    <th> Number of Logs </th>
                    <th> Last Modified </th>
                </tr>
            </thead>

            <tbody>
                <tr>
                    <td>@File.Name </td>
                    <td>@File.Size</td>
                    <td>@Well.Data.Headers.Length</td>
                    <td>@Well.Data.Logs.Length</td>
                    <td>@File.LastModified.ToShortDateString()</td>
                </tr>
            </tbody>
        </table>

        <hr size="5" noshade>

        <WellLogHeadersTable well="@Well"></WellLogHeadersTable>

        <WellLogsTable well="@Well"></WellLogsTable>

    }
}

@code {
    private IFileListEntry File;
    Well Well;

    //public int ContainerX { get; set; } = 0;
    //public int ContainerY { get; set; } = 0;
    //public int ElementX { get; set; } = 0;
    //public int ElementY { get; set; } = 0;
    //public int ContainerMouseX { get; set; } = 0;
    //public int ContainerMouseY { get; set; } = 0;
    //public bool OverChild { get; set; } = false;
    //public int SelectedItem { get; set; } = -1;
    //public List<Log> Rectangles { get; set; }

    //public MainViewModel()
    //{
    //    Initialize();
    //}

    //public void Initialize()
    //{
    //    Random rnd = new Random();

    //    Rectangles = new List<Rectangle>();

    //    for (int i = 0; i < 10; i++)
    //    {
    //        var r = new Rectangle
    //        {
    //            RectangleId = i + 1,
    //            X = (int)rnd.Next(0, 600),
    //            Y = (int)rnd.Next(0, 600),
    //            Width = 20 * (int)rnd.Next(5, 10),
    //            Height = 20 * (int)rnd.Next(5, 10),
    //            R = rnd.Next(0, 255),
    //            G = rnd.Next(0, 255),
    //            B = rnd.Next(0, 255),
    //        };

    //        Rectangles.Add(r);
    //    }
    //}

    async Task LoadLogASCII(IFileListEntry[] files)
    {
        File = files.FirstOrDefault();
        Well = await Well.GetWellFromFileListEntryAsync(File);
    }
}
