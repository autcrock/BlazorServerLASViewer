@page "/loadlogasciilasfile"
@using BlazorServerLASViewer.Domains.Well;

@inject IJSRuntime JSRuntime
@inject WellSvg WellSvg;


<h1>Log ASCII (LAS) file loader</h1>

<InputFile OnChange="LoadLogASCII" />

<svg @onmousemove="@MouseMove" class="MainSVG" width="800" height="800" style="background:rgb(200, 200, 200)">

    @foreach (LogSvg r in WellSvg.Logs)
    {
        <RectangleElement DataContext="r" ChangeSelected="@ChangeSelected" />
    }

</svg>

@if (File == null)
{
    <p> No file selected</p>
}
else
{

    if (Well == null || Well.Data == null || Well.Data.Headers == null || Well.Data.Logs == null)
    {
        <p>Loading log ASCII format file : @File.Name (@File.Size bytes)</p>
    }
    else
    {
        <style>
            th, td {
                padding: 5px;
            }
        </style>

        <table>
            <thead>
                <tr>
                    <th> File Name </th>
                    <th> File Size </th>
                    <th> Number of Log Headers </th>
                    <th> Number of Logs </th>
                    <th> Last Modified </th>
                </tr>
            </thead>

            <tbody>
                <tr>
                    <td>@File.Name </td>
                    <td>@File.Size</td>
                    <td>@Well.Data.Headers.Length</td>
                    <td>@Well.Data.Logs.Length</td>
                    <td>@File.LastModified.ToShortDateString()</td>
                </tr>
            </tbody>
        </table>
        <WellTable well="@Well"></WellTable>

        <hr size="5" noshade />

        <h3>Movement</h3>

        <div>OverChild: @WellSvg.OverChild</div>

        <div>Cursor Position: @WellSvg.ContainerMouseX,@WellSvg.ContainerMouseY</div>

        <div>
            Element Id:
            @if (WellSvg.SelectedItem > -1)
            {
                @WellSvg.SelectedItem <span> Element Position:</span> @WellSvg.ElementX <span>,</span>@WellSvg.ElementY
            }
            else
            {
                <span>none</span>
            }
        </div>

        @code
{
            private IFileListEntry File;
            Well Well;

            async Task LoadLogASCII(IFileListEntry[] files)
            {
                File = files.FirstOrDefault();
                Well = await Well.GetWellFromFileListEntryAsync(File);
            }

            public void MouseMove(MouseEventArgs e)
            {
                WellSvg.ContainerMouseX = (int)e.ClientX - WellSvg.ContainerX;
                WellSvg.ContainerMouseY = (int)e.ClientY - WellSvg.ContainerY;

                if (WellSvg.SelectedItem > -1)
                {
                    var r = WellSvg.Logs[WellSvg.SelectedItem - 1];
                    var x = WellSvg.ContainerMouseX - r.OriginalX;
                    var y = WellSvg.ContainerMouseY - r.OriginalY;

                    r.X = x;
                    r.Y = y;

                    WellSvg.ElementX = x;
                    WellSvg.ElementY = y;

                }
            }

            public async void ChangeSelected(string newselected)
            {
                //Set an SVG <g> Element over Top in the <svg>
                //method contained in _Host.cshtml
                await JSRuntime.InvokeAsync<string>("PlaceOnTop", new object[] { newselected });
                base.StateHasChanged();
            }

            //This is called after OnInitialized
            protected override async void OnAfterRender(bool firstRender)
            {
                if (firstRender)
                {
                    //Get SVG Position and Pass to the ViewModel
                    //method contained in _Host.cshtml
                    var raw = await JSRuntime.InvokeAsync<decimal[]>("ContainerPos", null);
                    WellSvg.ContainerX = (int)raw[0];
                    WellSvg.ContainerY = (int)raw[1];
                }
                base.OnAfterRender(firstRender);
            }
        }
    }
}
