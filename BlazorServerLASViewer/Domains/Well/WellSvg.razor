@inject IJSRuntime JSRuntime

<h3>Well as SVG view</h3>

<svg @onmousemove="@MouseMove" class="WellSVG" width="800" height="600" style="background:rgb(200, 200, 200)">

    @foreach (var log in @Well.Data.Logs)
    {
        <RectangleElement DataContext="@Log" ChangeSelected="@ChangeSelected" />
    }

</svg>

@functions{
    
    protected override void OnInitialized()
    {
        Initialize();
    }

}

@code {
    [Parameter]
    public Well Well { get; set; }

    public int ContainerX { get; set; } = 0;
    public int ContainerY { get; set; } = 0;
    public int ElementX { get; set; } = 0;
    public int ElementY { get; set; } = 0;
    public int ContainerMouseX { get; set; } = 0;
    public int ContainerMouseY { get; set; } = 0;
    public bool OverChild { get; set; } = false;
    public int SelectedItem { get; set; } = -1;
    public List<LogSvg> Logs { get; set; }

    public WellSvg()
    {
        Initialize();
    }

    public void MouseMove(MouseEventArgs e)
    {
        ContainerMouseX = (int)e.ClientX - ContainerX;
        ContainerMouseY = (int)e.ClientY - ContainerY;

        if (SelectedItem > -1)
        {
            var r = Logs[SelectedItem - 1];
            var x = ContainerMouseX - r.OriginalX;
            var y = ContainerMouseY - r.OriginalY;

            r.X = x;
            r.Y = y;

            ElementX = x;
            ElementY = y;
        }
    }

    public async void ChangeSelected(string newselected)
    {
        //Set an SVG <g> Element over Top in the <svg>
        //method contained in _Host.cshtml
        await JSRuntime.InvokeAsync<string>("PlaceOnTop", new object[] { newselected });
        base.StateHasChanged();
    }

    //This is called after OnInitialized
    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //Get SVG Position and Pass to the ViewModel
            //method contained in _Host.cshtml
            var raw = await JSRuntime.InvokeAsync<decimal[]>("ContainerPos", null);
            ContainerX = (int)raw[0];
            ContainerY = (int)raw[1];
        }
        base.OnAfterRender(firstRender);
    }

    public void Initialize()
    {
        //Random rnd = new Random();

        //Logs = new List<LogSvg>();

        //for (int i = 0; i < 10; i++)
        //{
        //    var r = new LogSvg
        //    {
        //        RectangleId = i + 1,
        //        X = (int)rnd.Next(0, 600),
        //        Y = (int)rnd.Next(0, 600),
        //    };

        //    Logs.Add(r);
        //}
    }
}
