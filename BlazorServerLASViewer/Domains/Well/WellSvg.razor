@inject IJSRuntime JSRuntime
@inject MainViewModel MainViewModel;

@using BlazorServerLASViewer.Domains.Well;

<h3>Well as SVG view</h3>

<svg @onmousemove="@MouseMove"
     class="WellSVG"
     width="800"
     height="600"
     style="background:rgb(200, 200, 200)">
    @foreach(var log in MainViewModel.Logs)
    {
        <LogSvg log="@log" ChangeSelected="@ChangeSelected"> </LogSvg>
    }
</svg>

@code {
    [Parameter]
    public Well Well { get; set; }

    public void MouseMove(MouseEventArgs e)
    {
        MainViewModel.ContainerMouseX = (int)e.ClientX - MainViewModel.ContainerX;
        MainViewModel.ContainerMouseY = (int)e.ClientY - MainViewModel.ContainerY;

        if ( MainViewModel.SelectedItem > -1 )
        {
            var logSvgViewRectangle = MainViewModel.Logs[MainViewModel.SelectedItem-1].SvgViewRectangle;
            var x = MainViewModel.ContainerMouseX - logSvgViewRectangle.OriginalX;
            var y = MainViewModel.ContainerMouseY - logSvgViewRectangle.OriginalY;

            logSvgViewRectangle.X = x;
            logSvgViewRectangle.Y = y;

            MainViewModel.ElementX = x;
            MainViewModel.ElementY = y;

        }
    }

    public async void ChangeSelected(string newselected)
    {
        //Set an SVG <g> Element over Top in the <svg>
        //method contained in _Host.cshtml
        await JSRuntime.InvokeAsync<string>("PlaceOnTop", new object[] { newselected });
        base.StateHasChanged();
    }

    //This is called after OnInitialized
    protected override async void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            //Get SVG Position and Pass to the ViewModel 
            //method contained in _Host.cshtml
            var raw = await JSRuntime.InvokeAsync<decimal[]>("ContainerPos", null);
            MainViewModel.ContainerX = (int)raw[0];
            MainViewModel.ContainerY = (int)raw[1];
        }
        base.OnAfterRender(firstRender);
    }
}
