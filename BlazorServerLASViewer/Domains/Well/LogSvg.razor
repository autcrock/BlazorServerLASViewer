@namespace BlazorServerLASViewer.Domains.Well

@inject IJSRuntime JSRuntime;
@inject WellViewModel WellViewModel;

<style>
       LogSvg {
            background:rgb(255, 255, 255);
            height:@Log.SvgViewRectangle.Height;
            width:@Log.SvgViewRectangle.Width;
        }
</style>

<g id="@($"LogGroup{Log.SvgViewRectangle.RectangleId}")">

    <rect style="height:@Log.SvgViewRectangle.Height;
                    width:@Log.SvgViewRectangle.Width;
                    fill:rgb(@Log.SvgViewRectangle.R,@Log.SvgViewRectangle.G,@Log.SvgViewRectangle.B);
                    cursor:@pointer;
                    stroke-width:@WellViewModel.WellBorderWidth;
                    stroke:rgb(0,0,0)"
          @onmousemove="MouseMove"
          @onmousedown="MouseDown"
          @onmouseup="MouseUp"
          @onmouseout="MouseOut"
          x="@Log.SvgViewRectangle.X"
          y="@Log.SvgViewRectangle.Y" />

    <line x1="@HeaderCurveDivideX1"
          y1="@HeaderCurveDivideY1"
          x2="@HeaderCurveDivideX2"
          y2="@HeaderCurveDivideY2"
          style="pointer-events: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none; stroke: rgb(0,0,0); stroke-width: @WellViewModel.WellBorderWidth" />

    <text style="pointer-events: none; -webkit-user-select: none; -moz-user-select: none; -ms-user-select: none;  user-select: none;"
          x="@(Log.SvgViewRectangle.X + 4)"
          y="@(Log.SvgViewRectangle.Y + 20)"
          fill="black"> @Log.SvgViewRectangle.Position </text>

    </g>


    @code {

        [Parameter]
        public Log<double> Log { get; set; }

        [Parameter]
        public Action<string> ChangeSelected { get; set; }

        [Parameter]
        public string pointer { get; set; } = "pointer";

        private int HeaderCurveDivideX1 => Log.SvgViewRectangle.X;
        private int HeaderCurveDivideY1 => Log.SvgViewRectangle.Y + WellViewModel.LogHeaderHeight; 

        private int HeaderCurveDivideX2 => Log.SvgViewRectangle.X + WellViewModel.LogWidth;
        private int HeaderCurveDivideY2 => Log.SvgViewRectangle.Y + WellViewModel.LogHeaderHeight; 

        public void MouseDown(MouseEventArgs e)
        {
            if (WellViewModel.SelectedItem == -1)
            {
                Log.SvgViewRectangle.OriginalX = (int)e.ClientX - Log.SvgViewRectangle.X - WellViewModel.ContainerX;
                Log.SvgViewRectangle.OriginalY = (int)e.ClientY - Log.SvgViewRectangle.Y - WellViewModel.ContainerY;

                WellViewModel.SelectedItem = Log.SvgViewRectangle.RectangleId;
                ChangeSelected?.Invoke($"LogGroup{Log.SvgViewRectangle.RectangleId}");
            }
        }

        public void MouseUp(MouseEventArgs args)
        {
            if (WellViewModel.SelectedItem == Log.SvgViewRectangle.RectangleId)
            {
                WellViewModel.SelectedItem = -1;
            }
        }

        public void MouseOut(MouseEventArgs e)
        {
            WellViewModel.OverChild = false;
        }

        public void MouseMove(MouseEventArgs e)
        {
            WellViewModel.OverChild = true;
        }

    }
